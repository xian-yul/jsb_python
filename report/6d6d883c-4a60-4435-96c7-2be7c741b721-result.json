{"name": "test_seller_add_raw", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00CBF243]\n\t(No symbol) [0x00C47FD1]\n\t(No symbol) [0x00B3D04D]\n\t(No symbol) [0x00B9C836]\n\t(No symbol) [0x00B88386]\n\t(No symbol) [0x00B6163C]\n\t(No symbol) [0x00B6269D]\n\tGetHandleVerifier [0x00F59A22+2655074]\n\tGetHandleVerifier [0x00F4CA24+2601828]\n\tGetHandleVerifier [0x00D68C0A+619850]\n\tGetHandleVerifier [0x00D67830+614768]\n\t(No symbol) [0x00C505FC]\n\t(No symbol) [0x00C55968]\n\t(No symbol) [0x00C55A55]\n\t(No symbol) [0x00C6051B]\n\tBaseThreadInitThunk [0x776300F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77777BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77777B8E+238]", "trace": "self = <test_seller_raw.TestSellerRaw object at 0x00000243DF40D0D0>, drivers = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7bde12ccb367099a077543dfb21b03c1\")>\n\n    def test_seller_add_raw(self, drivers):\n        log.info('当前执行   卖家端添加原料    ')\n        seller = JsbSellerGoodsAdd(drivers)\n        current_time = time.strftime('%Y-%m-%d %H:%M:%S')\n        serve = '24'\n        sellerPhone = '18929867679'\n        addGoods = '原料'\n        goodsNumber = 100\n        stockNum = 1000\n        minPurchase = 10\n        deliveryPrice = 10000\n        deliveryDays = '我是配送时间'\n        selfMentionDays = '我是提货时间'\n        goodsDeliver = 3  # 1单配送 2单自提 3配送+自提\n        included = 1\n        selfMentionPrice = 20000\n        add_type = 1\n        number = 'HDPE'\n        img_path = 'D:\\\\资料\\\\raw.png'\n        video_path = 'D:\\\\资料\\\\video.mp4'\n        profiles = '我是原料商品内容概要'\n        detail = '我是原料商品详情'\n        limit = 1\n>       seller.seller_raw_add(serve, sellerPhone, addGoods, goodsDeliver, included, stockNum, minPurchase,\n                              deliveryPrice,\n                              deliveryDays\n                              , selfMentionPrice, selfMentionDays, profiles, detail, goodsNumber, video_path, img_path,\n                              limit, add_type, number)\n\nTestCase\\test_seller_raw.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_object\\JsbSellerGoodsAdd.py:138: in seller_raw_add\n    self.seller_phone_login(serve, sellerPhone)\npage\\webpage.py:237: in seller_phone_login\n    self.driver.get(seller_url['24'])\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:441: in get\n    self.execute(Command.GET, {'url': url})\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000243DF266100>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"{Alert text : \"},\"error\":\"unexpected alert open\",\"message\":\"unexpe...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77777BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77777B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nE           Message: unexpected alert open: {Alert text : }\nE             (Session info: chrome=109.0.5414.120)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x00CBF243]\nE           \t(No symbol) [0x00C47FD1]\nE           \t(No symbol) [0x00B3D04D]\nE           \t(No symbol) [0x00B9C836]\nE           \t(No symbol) [0x00B88386]\nE           \t(No symbol) [0x00B6163C]\nE           \t(No symbol) [0x00B6269D]\nE           \tGetHandleVerifier [0x00F59A22+2655074]\nE           \tGetHandleVerifier [0x00F4CA24+2601828]\nE           \tGetHandleVerifier [0x00D68C0A+619850]\nE           \tGetHandleVerifier [0x00D67830+614768]\nE           \t(No symbol) [0x00C505FC]\nE           \t(No symbol) [0x00C55968]\nE           \t(No symbol) [0x00C55A55]\nE           \t(No symbol) [0x00C6051B]\nE           \tBaseThreadInitThunk [0x776300F9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77777BBE+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77777B8E+238]\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: UnexpectedAlertPresentException"}, "attachments": [{"name": "log", "source": "e049cdcf-0066-4778-a2a0-32dc16971633-attachment.txt", "type": "text/plain"}], "start": 1675835247412, "stop": 1675835250984, "uuid": "0b8c79c7-55ba-4094-a381-902489912735", "historyId": "ebeee86eab4d460e7fc9a6606db65d93", "testCaseId": "2219ab37e628b539770228f93f52281b", "fullName": "TestCase.test_seller_raw#None", "labels": [{"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_seller_raw"}, {"name": "subSuite", "value": "TestSellerRaw"}, {"name": "host", "value": "DESKTOP-JVF68O2"}, {"name": "thread", "value": "7676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_seller_raw"}]}